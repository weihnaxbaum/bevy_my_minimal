[package]
name = "{{project-name}}"
version = "0.1.0"
edition = "2024"

[dependencies]
bevy = { version = "0.17", default-features = false, features = [
    "async_executor",
    "bevy_log",
    "bevy_winit",
    "multi_threaded",
    "std",
    "wayland",
    "webgl2",
    "x11",
] }
# Set max log levels. This helps avoid unwanted low-severity log spam, which can affect performance.
log = { version = "0.4", features = [
    "max_level_debug",
    "release_max_level_warn",
] }
tracing = { version = "0.1", features = [
    "max_level_debug",
    # Has to be info for profiling. Override to warn for actual release builds.
    "release_max_level_info",
] }

[features]
default = ["dev_native"]
console = []
dev = [
    "console",
    # Improve compile times for dev builds by linking Bevy as a dynamic library.
    "bevy/dynamic_linking",
    "bevy/bevy_dev_tools",
    "bevy/bevy_ui_debug",
    # Improve error messages coming from Bevy
    "bevy/track_location",
]
dev_native = [
    "dev",
    # Enable asset hot reloading for native dev builds.
    "bevy/file_watcher",
    # Enable embedded asset hot reloading for native dev builds.
    "bevy/embedded_watcher",
]

[package.metadata.bevy_cli.release]
# Disable dev features for release builds.
default-features = false

[package.metadata.bevy_cli.web]
# Disable native features for web builds.
default-features = false

[package.metadata.bevy_cli.web.dev]
features = ["dev"]

[lints.rust]
# Mark `bevy_lint` as a valid `cfg`, as it is set when the Bevy linter runs.
unexpected_cfgs = { level = "warn", check-cfg = ["cfg(bevy_lint)"] }# Idiomatic Bevy code often triggers these lints, and the CI workflow treats them as errors.

# In some cases they may still signal poor code quality however, so consider commenting out these lines.
[lints.clippy]
# Bevy supplies arguments to systems via dependency injection, so it's natural for systems to
# request more than 7 arguments -- which triggers this lint.
too_many_arguments = "allow"
# Queries that access many components may trigger this lint.
type_complexity = "allow"
# Make sure macros use their standard braces, such as `[]` for `bevy_ecs::children!`.
nonstandard_macro_braces = "warn"

# Enable a small amount of optimization in the dev profile.
[profile.dev]
opt-level = 1

# Enable a large amount of optimization in the dev profile for dependencies.
[profile.dev.package."*"]
opt-level = 3

# Remove expensive debug assertions due to <https://github.com/bevyengine/bevy/issues/14291>
[profile.dev.package.wgpu-types]
debug-assertions = false

[profile.release]
# Compile the entire crate as one unit.
# Slows compile times, marginal improvements.
codegen-units = 1
# Do a second optimization pass over the entire program, including dependencies.
# Slows compile times, marginal improvements.
lto = "thin"

# This profile will be used by `bevy run web` automatically.
[profile.web-release]
# Default to release profile values.
inherits = "release"
# Optimize with size in mind (also try "z", sometimes it is better).
# Slightly slows compile times, great improvements to file size and runtime performance.
opt-level = "s"
# Strip all debugging information from the binary to slightly reduce file size.
strip = "debuginfo"
